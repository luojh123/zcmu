#include<iostream>  
using namespace std;
#include<cstdlib>
#include<iostream>
using namespace std;
typedef long long lld;
const lld MAX=10;

lld multi(lld a,lld b,lld m)//加法代替乘法，防止溢出__int64
{
    lld ret=0;
    a%=m;
    while(b)
    {
        if(b%2) if((ret+=a)>=m) ret-=m;
        if((a<<=1)>=m) a-=m;
        b>>=1;
    }
    return ret;
}
lld mod(lld a,lld b,lld m)
{
    lld x,y;
    if(b==1)//1次幂，直接返回
        return a%m;
    x=mod(a,b/2,m);//二分求幂
    y=multi(x,x,m);//平方一下
    if(y==1&&x!=1&&x!=m-1)//如果结果是1的时候，如果x不是1而且不是m-1那么m必然不是素数。
        return 0;
    if(b%2)//奇数的情况，再乘上一个a
        y=multi(y,a,m);
    return y;
}
lld gen(lld m)
{
    lld ret=1,i;
    for(i=0;i<4;i++)
        ret*=rand();
    ret%=m;
    if(ret<0)
        ret+=m;
    return ret;
}

//入口 
bool test(lld n)
{
    lld a,i,tmp;
    if(n<2)//小于2不是素数
        return 0;
    if(n==2)//2是素数，直接返回
        return 1;
    if(!(n%2))//偶数
        return 0;

    for(i=0;i<MAX;i++)//测试最大次数
    {
        a=gen(n-1)+1;//生成一个2到n-2的数字
        tmp=mod(a,n-1,n);//快速幂
        if(tmp!=1)//结果不是1，不是素数
            return 0;
    }
    return 1;//是素数
}

bool isPalindrome(int n)  
{  
    int a[10]; 
    int i=0;     
    while(n>0)  
    {  
        a[i]=n%10;  
		i++;
        n/=10;  
    }  
    int j=0,k=i-1;  
    while(a[j]==a[k]&&j<k)  
        j++,k--;  
    if(j>=k)   
        return true;  
    else   
        return false;  
} 

int main()  
{     
	long long i,n,m;  
	while(cin>>n>>m)
	{
		for(i=n;i<=m;i++)  
			if(isPalindrome(i) && test(i))  
			{
				cout<<i<<endl;
				continue;
			}
		cout<<endl;
	}
	return 0;  
}  